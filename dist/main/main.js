(()=>{var e={339:e=>{"use strict";e.exports=require("module")},896:e=>{"use strict";e.exports=require("fs")},936:e=>{function i(e){var i=new Error("Cannot find module '"+e+"'");throw i.code="MODULE_NOT_FOUND",i}i.keys=()=>[],i.resolve=i,i.id=936,e.exports=i}},i={};function s(t){var n=i[t];if(void 0!==n)return n.exports;var o=i[t]={exports:{}};return e[t](o,o.exports,s),o.exports}s.o=(e,i)=>Object.prototype.hasOwnProperty.call(e,i),(()=>{"use strict";const e=require("electron"),i=require("path");var t,n=s(896);!function(e){e.TYPING_EVENT="typing-event",e.TYPING_SESSION_END="typing-session-end",e.HAMMY_REACTION="hammy-reaction",e.DASHBOARD_OPEN="dashboard-open",e.DASHBOARD_CLOSE="dashboard-close",e.STATISTICS_REQUEST="statistics-request",e.STATISTICS_RESPONSE="statistics-response",e.SETTINGS_UPDATE="settings-update",e.PING="ping",e.PONG="pong"}(t||(t={}));const o=require("events");let r=null;function a(){if(r)return r;try{const e=i.join(process.cwd(),"dist","main","build","Release","keyboard_native.node");if(console.log(`Attempting to load native module from: ${e}`),!s(896).existsSync(e))throw new Error(`Native module file does not exist at: ${e}`);console.log("Native module file exists, attempting to load..."),s(339);const t={exports:{}};try{return process.dlopen(t,e),r=t.exports,console.log("Successfully loaded native module using process.dlopen"),r}catch(i){return console.log("process.dlopen failed, trying require..."),r=s(936)(e),console.log("Successfully loaded native module using require"),r}}catch(e){throw console.error("Failed to load native keyboard module:",e),new Error('Native keyboard module not found. Please run "npm run build:native" first.')}}class l{constructor(){this.callback=null}startListening(e){if(this.callback)throw new Error("Keyboard listener is already running");this.callback=e;try{return a().startListening(e=>{this.callback&&this.callback(e)})}catch(e){throw this.callback=null,e}}stopListening(){if(!this.callback)return!0;try{const e=a().stopListening();return this.callback=null,e}catch(e){return console.error("Failed to stop keyboard listener:",e),!1}}checkPermissions(){try{return a().checkPermissions()}catch(e){return console.error("Failed to check permissions:",e),{hasPermission:!1,requiresElevation:!0,permissionMessage:"Failed to check permissions"}}}isListening(){try{return a().isListening()}catch(e){return!1}}}new l;class c extends o.EventEmitter{constructor(){super(),this.lastKeyTime=0,this.keyCount=0,this.isListening=!1,this.typingTimeout=null,this.TYPING_TIMEOUT=2e3,this.simulationInterval=null,this.isSimulationMode=!1,this.nativeListener=new l,this.sessionId=this.generateSessionId()}generateSessionId(){return`session_${Date.now()}_${Math.random().toString(36).substring(2,11)}`}handleNativeKeyEvent(e){e.isKeyDown&&(e.isSpecialKey||this.handleKeyPress(e.timestamp))}handleKeyPress(e){const i=e||Date.now(),s=this.lastKeyTime>0?i-this.lastKeyTime:0;this.keyCount++,this.lastKeyTime=i,this.typingTimeout&&clearTimeout(this.typingTimeout);const t={timestamp:i,keyCount:this.keyCount,interval:s,isActive:!0,sessionId:this.sessionId};this.emit("typing",t),this.typingTimeout=setTimeout(()=>{this.endTypingSession()},this.TYPING_TIMEOUT)}endTypingSession(){const e={timestamp:Date.now(),keyCount:this.keyCount,interval:0,isActive:!1,sessionId:this.sessionId};this.emit("typingEnd",e),this.keyCount=0,this.lastKeyTime=0,this.sessionId=this.generateSessionId()}startListening(){if(!this.isListening)try{const e=this.nativeListener.checkPermissions();if(!e.hasPermission){console.warn("Keyboard permissions not granted:"),console.warn(e.permissionMessage);const i="darwin"===process.platform?"macOS 접근성 권한이 필요합니다.\n\n1. 시스템 환경설정을 엽니다\n2. 보안 및 개인 정보 보호를 클릭합니다\n3. 개인 정보 보호 탭을 선택합니다\n4. 접근성을 클릭합니다\n5. Electron 또는 Typster Hammy 앱을 체크합니다\n\n권한을 부여한 후 앱을 다시 시작해주세요.":e.permissionMessage;return this.emit("permissionRequired",{platform:process.platform,message:i,requiresElevation:e.requiresElevation}),console.log("개발 모드: 권한 없이 시뮬레이션 모드로 진행합니다."),void this.startSimulationMode()}if(!this.nativeListener.startListening(e=>{this.handleNativeKeyEvent(e)}))throw new Error("Failed to start native keyboard listener");this.isListening=!0,console.log("Native keyboard service started successfully"),this.emit("serviceStarted")}catch(e){throw console.error("Failed to start keyboard service:",e),this.emit("serviceError",e),e}}stopListening(){if(this.isListening)try{this.typingTimeout&&(clearTimeout(this.typingTimeout),this.typingTimeout=null),this.isSimulationMode?this.stopSimulationMode():this.nativeListener.stopListening(),this.isListening=!1,console.log("Keyboard service stopped"),this.emit("serviceStopped")}catch(e){console.error("Failed to stop keyboard service:",e),this.emit("serviceError",e)}}isActive(){return this.isListening&&(this.isSimulationMode||this.nativeListener.isListening())}getCurrentSession(){return this.sessionId}getKeyCount(){return this.keyCount}checkPermissions(){return this.nativeListener.checkPermissions()}startSimulationMode(){this.isSimulationMode=!0,this.isListening=!0,console.log("시뮬레이션 모드 시작: 가짜 타이핑 이벤트를 생성합니다."),this.simulationInterval=setInterval(()=>{const e=400*Math.random()+100;setTimeout(()=>{this.handleKeyPress()},e),Math.random()<.3&&(setTimeout(()=>{this.handleKeyPress()},e+150),setTimeout(()=>{this.handleKeyPress()},e+300))},3e3),this.emit("serviceStarted")}stopSimulationMode(){this.simulationInterval&&(clearInterval(this.simulationInterval),this.simulationInterval=null),this.isSimulationMode=!1,console.log("시뮬레이션 모드 중지")}destroy(){this.stopListening(),this.stopSimulationMode(),this.removeAllListeners()}}new class{constructor(){this.mainWindow=null,this.keyboardService=null,this.isDev=!1,this.initializeApp(),this.initializeKeyboardService()}initializeApp(){e.app.whenReady().then(()=>{this.createMainWindow(),this.setupIPC(),e.app.on("activate",()=>{0===e.BrowserWindow.getAllWindows().length&&this.createMainWindow()})}),e.app.on("window-all-closed",()=>{"darwin"!==process.platform&&e.app.quit()}),e.app.on("web-contents-created",(e,i)=>{i.setWindowOpenHandler(()=>({action:"deny"}))}),e.app.on("before-quit",()=>{this.keyboardService&&this.keyboardService.destroy()})}createMainWindow(){const s=i.join(__dirname,"preload.js");n.existsSync(s)?console.log(`Preload script found at: ${s}`):(console.error(`Preload script not found at: ${s}`),console.log("Available files in dist/main:",n.readdirSync(__dirname))),this.mainWindow=new e.BrowserWindow({width:1200,height:800,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:s},show:!1,title:"Typster Hammy"}),this.isDev?(this.mainWindow.loadURL("http://localhost:3001"),this.mainWindow.webContents.openDevTools()):this.mainWindow.loadFile(i.join(__dirname,"../renderer/index.html")),this.mainWindow.once("ready-to-show",()=>{this.mainWindow?.show()}),this.mainWindow.on("closed",()=>{this.mainWindow=null})}initializeKeyboardService(){this.keyboardService=new c,this.keyboardService.on("typing",e=>{const i={timestamp:e.timestamp,keyCount:e.keyCount,interval:e.interval,isActive:e.isActive,sessionId:e.sessionId};console.log("Typing detected:",{keyCount:i.keyCount,interval:i.interval,sessionId:i.sessionId}),this.mainWindow&&this.mainWindow.webContents.send(t.TYPING_EVENT,i)}),this.keyboardService.on("typingEnd",e=>{const i={timestamp:e.timestamp,keyCount:e.keyCount,interval:e.interval,isActive:!1,sessionId:e.sessionId};console.log("Typing session ended:",i.sessionId),this.mainWindow&&this.mainWindow.webContents.send(t.TYPING_SESSION_END,i)}),this.keyboardService.on("permissionRequired",e=>{console.log("Permission required:",e),this.showPermissionDialog(e),this.mainWindow&&this.mainWindow.webContents.send("permission:required",e)}),this.keyboardService.on("serviceError",e=>{console.error("Keyboard service error:",e)})}setupIPC(){e.ipcMain.handle(t.PING,async()=>(console.log("Main process received ping"),"pong")),e.ipcMain.handle("keyboard:start",async()=>{try{return this.keyboardService?.startListening(),{success:!0,message:"Keyboard service started"}}catch(e){return{success:!1,error:e.message}}}),e.ipcMain.handle("keyboard:stop",async()=>{try{return this.keyboardService?.stopListening(),{success:!0,message:"Keyboard service stopped"}}catch(e){return{success:!1,error:e.message}}}),e.ipcMain.handle("keyboard:status",async()=>({isActive:this.keyboardService?.isActive()||!1,keyCount:this.keyboardService?.getKeyCount()||0,sessionId:this.keyboardService?.getCurrentSession()||null})),e.ipcMain.on(t.DASHBOARD_OPEN,()=>{console.log("Dashboard open requested")}),e.ipcMain.on(t.DASHBOARD_CLOSE,()=>{console.log("Dashboard close requested")}),e.ipcMain.on(t.TYPING_EVENT,(e,i)=>{console.log("Typing event received:",i)})}async showPermissionDialog(i){if(this.mainWindow)switch((await e.dialog.showMessageBox(this.mainWindow,{type:"warning",title:"키보드 접근 권한 필요",message:"Typster Hammy가 키보드 이벤트를 감지하려면 접근성 권한이 필요합니다.",detail:"macOS 시스템 환경설정에서 접근성 권한을 부여해주세요:\n\n1. 시스템 환경설정을 엽니다\n2. 보안 및 개인 정보 보호를 클릭합니다\n3. 개인 정보 보호 탭을 선택합니다\n4. 접근성을 클릭합니다\n5. 자물쇠를 클릭하여 변경을 허용합니다\n6. + 버튼을 클릭하여 앱을 추가합니다\n7. Electron 또는 Typster Hammy를 찾아 추가합니다\n8. 체크박스를 활성화합니다\n\n권한을 부여한 후 앱을 다시 시작해주세요.",buttons:["시스템 환경설정 열기","나중에","개발 모드로 계속"],defaultId:0,cancelId:1})).response){case 0:try{await e.shell.openExternal("x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility")}catch(i){console.error("Failed to open system preferences:",i),await e.shell.openExternal("x-apple.systempreferences:com.apple.preference.security")}break;case 1:console.log("User chose to set permissions later");break;case 2:console.log("User chose to continue in development mode")}}getMainWindow(){return this.mainWindow}}})()})();